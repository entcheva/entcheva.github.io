{"meta":{"title":"Adventures In Coding & Algorithms","subtitle":null,"description":"A Technical Blog","author":"Christina Entcheva","url":"http://entcheva.github.io"},"pages":[],"posts":[{"title":"Fun With Ruby on Rails","slug":"fun_with_ruby_on_rails","date":"2017-03-05T05:00:00.000Z","updated":"2017-03-22T20:57:01.000Z","comments":true,"path":"2017/03/05/fun_with_ruby_on_rails/","link":"","permalink":"http://entcheva.github.io/2017/03/05/fun_with_ruby_on_rails/","excerpt":"","text":"For the past few months I’ve immersed myself deep into JavaScript/React/Redux world and even turned a bit into a JavaScript fanboy. However, I recently had the opportunity to take a break from JavaScript and built a vanilla Ruby On Rails app, and I rediscovered the speed, simplicity, and fun of building with Rails. I came across some extra fun Rails helper methods, tips, and tricks and I want to share because we all deserve a little more joy in this world, amirite? Rails helper: time_ago_in_wordsThe Rails ActionView date helper time_ago_in_words takes an argument, for example, Time.now and outputs elapsed time since the input in prose. How fun is that?! Some examples from the documentation: 1234567891011time_ago_in_words(3.minutes.from_now) # =&gt; 3 minutestime_ago_in_words(3.minutes.ago) # =&gt; 3 minutestime_ago_in_words(Time.now - 15.hours) # =&gt; about 15 hourstime_ago_in_words(Time.now) # =&gt; less than a minutetime_ago_in_words(Time.now, include_seconds: true) # =&gt; less than 5 secondsfrom_time = Time.now - 3.days - 14.minutes - 25.secondstime_ago_in_words(from_time) # =&gt; 3 daysfrom_time = (3.days + 14.minutes + 25.seconds).agotime_ago_in_words(from_time) # =&gt; 3 days An alias for the time_ago_in_words method is distance_of_time_in_words_to_now. Rails helper: to_sentenceThe Rails helper to_sentence takes an array and converts it to a comma separated sentence, where the last element is joined by a connector word, for example: 12345678910111213[].to_sentence # =&gt; \"\"['one'].to_sentence # =&gt; \"one\"['one', 'two'].to_sentence # =&gt; \"one and two\"['one', 'two', 'three'].to_sentence # =&gt; \"one, two, and three\"['one', 'two'].to_sentence(passing: 'invalid option')# =&gt; ArgumentError: Unknown key :passing['one', 'two'].to_sentence(two_words_connector: '-')# =&gt; \"one-two\"['one', 'two', 'three'].to_sentence(words_connector: ' or ', last_word_connector: ' or at least ')# =&gt; \"one or two or at least three\" Joyous! Here’s the documentation. Rails helper: div_forThe helper div_for works very similarly to form_for but is specifically for divs. Div_for creates a div element with an id and class parameters that reference the specified Active Record object. Particularly useful if you want to iterate through a collection of divs. Here’s a quick example: 123&lt;%= div_for(@article, class: \"frontpage\") do %&gt; &lt;td&gt;&lt;%= @article.title %&gt;&lt;/td&gt;&lt;% end %&gt; Note: With Rails 5, div_for was removed from core Rails and moved to the record_tag_helper gem. Rails migrations: t.belongs_to in table migrationDid you know that you can include belongs_to in your table migrations? By including belongs_to in your migration, the Rails generator knows to add the corresponding belongs_to in the object model. In the following example… 123456789101112131415class CreateProducts &lt; ActiveRecord::Migration def self.up create_table :products do |t| t.belongs_to :category t.string :name t.decimal :price t.text :description t.timestamps end end def self.down drop_table :products endend … including t.belongs_to :category produces the corresponding model: 123class Product &lt; ActiveRecord::Base belongs_to :categoryend Rad. Adding belongs_to in your table migrations is also an alias for t.references. Read more about Rails associations here. Rails migrations: def up / def down vs. def changeYou may have noticed in the example above that Ryan Bates is using def up and def down vs. def change. In most cases, Rails can guess the reverse of your migration, for example, create_table and drop_table, and add_column and remove_column. In those cases, writing your migrations with def change makes sense and Rails will know the reverse and execute it on rails db:rollback. See the Rails guide on using the change method for a list of all supported migration definitions. However, in cases where Rails can’t automatically match the reverse action, be specific and write separate up and down migration definitions. For example, if you wanted to change the precision of a decimal point in your database, Rails couldn’t automatically guess the original precision on rollback, and separate up/down migration definitions are required. Here’s the code: 123456789class AddDetailsToProducts &lt; ActiveRecord::Migration def self.up change_column :products, :price, :decimal, precision: 10, scale: 2 end def self.down change_column :products, :price, :decimal, precision: 5, scale: 2 endend Rails routes: resource vs. resourcesLastly, you may have seen routes defined with resources, but there’s also an option called resource. The difference is subtle but an important semantic one that signals to other developers your intent and what they can expect from the application. You would use the singular resource to indicate that only a single resource will ever exist, for example a user dashboard. Two differences in behavior to note with the singular resource: resource does not define routes with an id, since a singular resource does not need serialized ids singular resources still map to plural controllers Below is an example of routes with a singular resource adapted from the Rails guide on singular resources: HTTP Verb Path Controller#Action Used for GET /dashboard/new dashboards#new return an HTML form for creating the dashboard POST /dashboard dashboards#create create the new dashboard GET /dashboard dashboards#show display the one and only dashboard resource GET /dashboard/edit dashboards#edit return an HTML form for editing the dashboard PATCH/PUT /dashboard dashboards#update update the one and only dashboard resource DELETE /dashboard dashboards#destroy delete the dashboard resource","categories":[],"tags":[]},{"title":"Refs, React & Redux","slug":"refs_react_and_redux","date":"2017-02-07T05:00:00.000Z","updated":"2017-02-08T05:33:57.000Z","comments":true,"path":"2017/02/07/refs_react_and_redux/","link":"","permalink":"http://entcheva.github.io/2017/02/07/refs_react_and_redux/","excerpt":"","text":"As we expand our React skills to follow the Redux pattern, we are moving to a paradigm where we let the store manage state and move away from dealing with the state directly. However, there are a few exceptions, one of which is how to deal with user input from a form. Here’s one example of how to handle user input: 12345678910111213141516171819202122232425class NoteCreate extends React.Component &#123; constructor(props)&#123; super(props) this.state = &#123;note: ''&#125; &#125; handleInputChange(event)&#123; this.setState(&#123; note: event.target.value &#125;) &#125; render()&#123; return ( &lt;div&gt; &lt;h3&gt;Add a Note&lt;/h3&gt; &lt;form onSubmit=&#123;this.handleSubmit.bind(this)&#125;&gt; &lt;input type='text' onChange=&#123;this.handleInputChange.bind(this)&#125; value=&#123;this.state.note&#125;/&gt; &lt;input type='submit' /&gt; &lt;/form&gt; &lt;/div&gt; ) &#125;&#125; In the code above we’re using setState() on a specific component to set the value of the user input from the form. This is totally fine, and as far as organizing state, the Redux docs on Organizing State say: Do I have to put all my state into Redux? Should I ever use React’s setState()?There is no “right” answer for this. Some users prefer to keep every single piece of data in Redux, to maintain a fully serializable and controlled version of their application at all times. Others prefer to keep non-critical or UI state, such as “is this dropdown currently open”, inside a component’s internal state. Using local component state is fine. As a developer, it is your job to determine what kinds of state make up your application, and where each piece of state should live. Find a balance that works for you, and go with it. At this point in time, I think managing state in a child component in the Redux pattern is a little bit outside the mental model that I’m working toward. As a result, I approached managing form input differently, using a ref to capture the user input. See below: 1234567891011121314151617181920class NoteCreate extends React.Component &#123; handleNewNote(event) &#123; event.preventDefault() const text = this.noteText.value this.props.store.dispatch(&#123;type: 'ADD_NOTE',note: text &#125;) &#125; render()&#123; return ( &lt;div&gt; &lt;h3&gt;Add a Note&lt;/h3&gt; &lt;form onSubmit=&#123;this.handleNewNote.bind(this)&#125;&gt; &lt;input type='text' ref=&#123;(input) =&gt; this.noteText = input&#125; /&gt; &lt;input type='submit' /&gt; &lt;/form&gt; &lt;/div&gt; ) &#125;&#125; In this case, I’m using a ref callback to store a reference to the DOM element, then dispatching that value directly to the store, as opposed to managing the state locally with setState() in that component. TradeoffsThe tradeoff between the setState() approach and the ref approach is that with setState() you are tracking state with a child component, but with refs even though you are sending state directly to the store, you are also directly accessing the DOM to pull that value. Neither option is 100% compliant to the React / Redux pattern, so it’s a matter of preference where to break convention - do what feels best for your mental model and your project. A third way to approach the task is with the mindset that form state is something that should be managed on the application level state, and accordingly build out a form reducer that updates the current value of the form. Refs and focus()Refs can be useful in a few other contexts: Managing focus, text selection, or media playback. Triggering imperative animations. Integrating with third-party DOM libraries. Let’s take a look at the first case, managing focus. Using a ref to access the DOM is a great solution for when we have a simple HTML form and want to focus the form field when a user clicks or is otherwise moving through the form: 123&lt;input type=\"text\" id=\"myTextField\" value=\"Text field.\"&gt;&lt;p&gt;&lt;/p&gt;&lt;button type=\"button\" onclick=\"focusMethod()\"&gt;Click me to focus on the text field!&lt;/button&gt; 123focusMethod = function getFocus() &#123; document.getElementById(\"myTextField\").focus();&#125; In this case, you would want to use a ref since you do want to directly reference that DOM element. In general, ref should be used sparingly, and only really if you can’t do something declaratively. But there are a few cases when they are very useful! ReferenceDo I have to put all my state into Redux? Should I ever use React’s setState()?http://redux.js.org/docs/faq/OrganizingState.html Refs and the DOMhttps://facebook.github.io/react/docs/refs-and-the-dom.html","categories":[],"tags":[]},{"title":"The Tree Data Structure","slug":"the_tree_data_structure","date":"2017-01-24T05:00:00.000Z","updated":"2017-02-08T05:57:20.000Z","comments":true,"path":"2017/01/24/the_tree_data_structure/","link":"","permalink":"http://entcheva.github.io/2017/01/24/the_tree_data_structure/","excerpt":"","text":"During the junior developer panel at Flatiron School, when asked about typical interview questions, one of the panelists mentioned that they were asked to “write a function that gets the depth of a tree.” I hear and read about trees often and I don’t really know what they are, so I thought this was a good opportunity to learn a little bit about trees! Trees in Cracking The Coding InterviewOn page 47 (10% into the book) of Cracking the Coding Interview, Gayle Laakmann McDowell outlines the “absolute must have basics” of data structures and algorithms to know for an interview: CaveatsI want mention that while this book is really useful and comprehensive, it is seemingly geared toward the “Stanford Big Four” set - kids who graduated from Stanford and are vying to work at Google, Facebook, Apple, or Microsoft. That’s not my lifestyle or what I’m interested in, but in any case it’s a very interesting book, and it’s good to know what Silicon Valley is expecting. As we heard in the junior developer panel, it’s likely that you will be asked CS questions during the interview process. Tree basicsAs an introduction, my goal for this post is to share: definitions and differences between tree and binary tree data structures real life examples of general trees overview of two techniques to traverse a tree What a tree is notA tree is not a linearly organized data structure, like an array or a linked list. A data structure is said to be linear if its elements form a sequence. A hash is also not a linearly organized data structure because its order of return cannot be guaranteed. General trees A general tree is a data structure with nodes. There is no limit on the degree of nodes in a general tree, and each node can have an infinite number of children. Real life examples of general trees:The DOMPhylogenetics (the study of the evolutionary history) Binary treesA binary tree is a data structure in that each node has at most two nodes: left and right. Real life examples of binary trees:Family tree Advantages of treesTrees are useful and frequently used because they have some advantages: Trees reflect structural relationships in the data Trees are used to represent hierarchies Trees provide an efficient insertion and searching Trees are very flexible data, allowing to move subtrees around with minimum effort Techniques for traversing a treeTraversing a tree can either take a breadth-first or a depth-first approach. Breadth first searchExplores the neighbor nodes first, before moving to the next level neighbors. There are three different types of depth-first traversals: PreOrder traversal - visit the parent first and then left and right children InOrder traversal - visit the left child, then the parent and the right child PostOrder traversal - visit left child, then the right child and then the parent Depth first searchExplores all the children of a neighboring node before moving to the next neighbor and its children. There is only one kind of breadth-first traversal: Level order traversal. This traversal visits nodes by levels from top to bottom and from left to right. Simple tree example in our Flatiron School curriculumWe have encountered trees in our Flatiron School curriculum. In the Hide and Seek lab, we traversed the DOM to find specific nodes using document.querySelector() and document.querySelectorAll(). The deepestChild function can be easily amended to return the depth of the tree as opposed to just returning the deepest child. ReferenceBinary tree - Wikipediahttps://en.wikipedia.org/wiki/Binary_tree Data Structures With JavaScript: Treehttps://code.tutsplus.com/articles/data-structures-with-javascript-tree--cms-23393 Binary Trees - Carnegie Mellon Universityhttps://www.cs.cmu.edu/~adamchik/15-121/lectures/Trees/trees.html Girl Develop It, Intro to Algorithmshttp://www.teaching-materials.org/algorithms/#/ The DOM Is A Treehttps://learn.co/tracks/web-development-immersive-winter-2016/javascript/the-dom/the-dom-is-a-tree","categories":[],"tags":[]},{"title":"Falsehoods Programmers Believe","slug":"falsehoods_programmers_believe","date":"2017-01-09T05:00:00.000Z","updated":"2017-02-14T00:13:29.000Z","comments":true,"path":"2017/01/09/falsehoods_programmers_believe/","link":"","permalink":"http://entcheva.github.io/2017/01/09/falsehoods_programmers_believe/","excerpt":"","text":"“Falsehoods Programmers Believe” is a collection compiled by Kevin Deldycke at Awesome Falsehood. Falsehoods Programmers Believe are misconceptions or assumptions than can negatively impact programming decisions and our codebase. There are falsehoods in many categories including human identity, shopping, music, date and time, and more. The initial blog post that started it all is titled “Falsehoods Programmers Believe About Names“ by Patrick McKenzie. In the post McKenzie says, “Anything someone tells you is their name is — by definition — an appropriate identifier for them.” In the classic How to Win Friends and Influence People Dale Carnegie says, “a person’s name is, to that person, the sweetest and most important sound in any language.” However, the systems we design as programmers often fail to acknowledge this fundamental aspect of a person’s identity. “Your last name contains invalid characters” John Graham-Cumming’s blog post “Your last name contains invalid characters” describes his personal experience and frustration with how web forms handle his hyphenated last name. The hyphen in his last name is often treated by many web forms as invalid input. He says, “Does the web site have any idea how rude it is to claim that my last name contains invalid characters? Clearly not. What they actually meant is: our web site will not accept that hyphen in your last name. But do they say that? No, of course not. They decide to shove in my face the claim that there’s something wrong with my name.” Additionally, some web forms will accept the hyphen in his name but have rules about how to deal with what comes after the hyphen. Graham-Cumming says, “Yahoo oddly believes that I don’t know how to type my own name and decides to lowercase the C in Cumming. It’s willing to accept the hyphen but not that I know who I am.” Graham Cumming’s experiences are just one example of how our own preconceptions can fail in the wild, and additionally add insult to injury with “suggestions” for customers who do not fit into our preconceived mold. Graham-Cumming continues, “There’s nothing wrong with my name […] What is wrong is the way this is being handled. If the system can’t cope with non-letters and spaces it needs to say that. […] So, form designers: stop blaming the user for your inadequacies.” “Hello, I’m Mr. Null. My Name Makes Me Invisible to Computers”Christopher Null writes in WIRED about his experience with web forms due to his last name. As programmers likely know, the word null is a reserved keyword that in some languages is used to indicate that a data value does not exist. For Null, entering his last name into a web form is often invalid - the form will prompt him to reenter a last name, with the error message that the last name cannot be left blank. For these cases, Null has come up with a workaround - he amends his last name to use it in combination with a middle name, or adds a period at the end, i.e. “Null.” Null also mentions that he frequently receives letters in the mail with his last name omitted, or addressed to simply “Mr.” Uncovering falsehoodsWhile the Null case may be a less egregious oversight from a cultural perspective, Christopher Null’s plight highlights yet another programmatic oversight that consequently rejects of one of the most fundamental aspects of a person’s identity. As programmers, in our quest to prevent bad data from entering our database, we can often end up making poor decisions or overlooking realities that result in exclusion of individuals, whole groups, or at the very least end up causing frustration for customers. The potential for these blind spots is just one business case for why diversity in the workplace is so important. With a more diverse team comes a variaty of background and experience, and consequently less risk for potential blindspots and errors. ReferenceAwesome Falsehood, Kevin Deldyckehttps://github.com/kdeldycke/awesome-falsehood Falsehoods Programmers Believe About Names, Patrick McKenziehttp://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/ “Your last name contains invalid characters”, John Graham-Cumminghttp://blog.jgc.org/2010/06/your-last-name-contains-invalid.html “Hello, I’m Mr. Null. My Name Makes Me Invisible to Computers”, Christopher Nullhttps://www.wired.com/2015/11/null/","categories":[],"tags":[]},{"title":"A Brief Introduction to Algorithms and Big-O Notation","slug":"intro-to-algorithms","date":"2016-12-15T05:00:00.000Z","updated":"2017-02-26T15:03:31.000Z","comments":true,"path":"2016/12/15/intro-to-algorithms/","link":"","permalink":"http://entcheva.github.io/2016/12/15/intro-to-algorithms/","excerpt":"","text":"Algorithms are a fundamental part of programming, computer science, and often, job interviews. As beginner programmers, algorithms can be daunting, but whether we realize it or not we’re already implementing them in different ways through the decisions we make in our code. What are algorithms?An algorithm is any repeatable process for finding the solution to a problem. If you can outline how to get to the solution step-by-step, and if you can replicate those results, you are probably using an algorithm. Algorithms in every day lifeAlgorithms don’t have to be scary - there are many algorithms at play in every-day life. Some basic algorithms include: A recipe for baking cookies Reorganizing your closet Your morning routine Why do algorithms matter?There are many algorithms, and each one has a different impact on how long your code takes to run, and how much memory it takes to run. That may not make a huge difference for our code today, but as our applications grow bigger and more complex it becomes increasingly important to assure that we’re writing code that’s efficient - that is, code that’s fast and does not take up a lot of space. You can imagine that customers expect the websites, mobile apps, and other applications to load fast and not eat up tons of memory. Algorithm efficiency and space/time complexityAlgorithm efficiency is measured in time and space complexity. Time complexity looks at how long an algorithm takes to solve, and space complexity is concerned with how much memory the algorithm takes to run. We usually end up talking more about time complexity, since space is usually more readily available than patience. Let’s tackle time complexity through a mathematical framework called Big O notation: In simple terms, according to Simple English Wikipedia, “Big O Notation is a way of saying how much time it takes for a mathematical algorithm to run or how much memory it uses.” Three examples and their Big O time complexity:Example 1: Look up an element in an array: 123456cats = [“Lil Bub”, “Maru”, “Venus\"]cats[2]more_cats = [“Garfield”, “Felix”, “Lil Bub”, “Maru”, “Mr. Jinks”, “Venus”, “Nyan Cat”, “Stimpy\"]more_cats[2] In the above example, the Big O time complexity is O(1) constant in that it takes the same amount of time regardless of input size. If the array was twice the size, the time it takes to run would be the same since we are always looking for the second element in the array. Example 2: Iterate over an array: 12345cats = [\"Garfield\", \"Felix\", \"Lil Bub\", \"Maru\", \"Mr. Jinks\", \"Venus\", \"Nyan Cat\", \"Stimpy\"]cats.each do |cat| puts \"I'm petting #&#123;cat&#125;\"end In the above example, the Big O time complexity is O(n) linear in that the time it takes corresponds to the size of the input. If the array was twice the size, the time it takes to run also grows, so it would take twice as long. Example 3: Binary search on a sorted array: In the above example, the Big O time complexity is O(log n) logarithmic in that the time it takes is divided by half each time. In this case, the algorithm is actually more efficient over time since the size of the array we have to search is cut in half each time. There are many more Big O notation complexities, and tons of algorithms. A handy tool for Big O is the Big O Cheat Sheet, linked below. ReferenceBig O Notation, Simple English Wikipediahttps://simple.wikipedia.org/wiki/Big_O_notation Big O Cheat Sheethttp://bigocheatsheet.com/ Girl Develop It, Intro to Algorithmshttp://www.teaching-materials.org/algorithms/#/ CodeNewbie, Episode 103: Algorithmshttp://www.codenewbie.org/podcast/algorithms Cracking the Coding Interview, Gayle Laakmann McDowellhttps://www.careercup.com/book The Algorithm Design Manual, Steven Skienahttp://www.algorist.com/ Introduction to Algorithms, CLRShttps://mitpress.mit.edu/books/introduction-algorithms","categories":[],"tags":[]}]}